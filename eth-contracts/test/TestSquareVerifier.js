// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('SquareVerifier')
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
var proofConfig =  require("../../zokrates/code/square/proof.json")
// Test verification with incorrect proof
contract('TestSquareVerifier', accounts => {
    
    describe('test verification', () => {

        it('should verify with correct proof', async () => {
            let sv = await SquareVerifier.new({from: accounts[0]});
            let {proof, input} = proofConfig;
            let valid = await sv.verifyTx.call(
                proof.A, proof.A_p, proof.B,
            proof.B_p, proof.C, proof.C_p, proof.H, proof.K, input
            )
            assert.equal(valid, true)
        })

        it('should not verify with incorrect proof', async () => {
            let sv = await SquareVerifier.new({from: accounts[0]});
            let {proof, input} = proofConfig;
            let valid = await sv.verifyTx.call(
                proof.A, proof.A_p, proof.B,
            proof.B_p, proof.C, proof.C_p, proof.H, proof.K, [10, 1]
            )
            assert.equal(valid, false)
        })
    })
})
